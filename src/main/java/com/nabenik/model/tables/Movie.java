/*
 * This file is generated by jOOQ.
*/
package com.nabenik.model.tables;


import com.nabenik.model.Keys;
import com.nabenik.model.Public;
import com.nabenik.model.tables.records.MovieRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Movie extends TableImpl<MovieRecord> {

    private static final long serialVersionUID = -1979235671;

    /**
     * The reference instance of <code>public.movie</code>
     */
    public static final Movie MOVIE = new Movie();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieRecord> getRecordType() {
        return MovieRecord.class;
    }

    /**
     * The column <code>public.movie.movie_id</code>.
     */
    public final TableField<MovieRecord, Long> MOVIE_ID = createField("movie_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.movie.title</code>.
     */
    public final TableField<MovieRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(250).nullable(false), this, "");

    /**
     * The column <code>public.movie.release_year</code>.
     */
    public final TableField<MovieRecord, Integer> RELEASE_YEAR = createField("release_year", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.movie.price</code>.
     */
    public final TableField<MovieRecord, Byte> PRICE = createField("price", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>public.movie.description</code>.
     */
    public final TableField<MovieRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(2500).nullable(false), this, "");

    /**
     * The column <code>public.movie.imdb_id</code>.
     */
    public final TableField<MovieRecord, String> IMDB_ID = createField("imdb_id", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>public.movie.poster_url</code>.
     */
    public final TableField<MovieRecord, String> POSTER_URL = createField("poster_url", org.jooq.impl.SQLDataType.VARCHAR.length(250).nullable(false), this, "");

    /**
     * Create a <code>public.movie</code> table reference
     */
    public Movie() {
        this("movie", null);
    }

    /**
     * Create an aliased <code>public.movie</code> table reference
     */
    public Movie(String alias) {
        this(alias, MOVIE);
    }

    private Movie(String alias, Table<MovieRecord> aliased) {
        this(alias, aliased, null);
    }

    private Movie(String alias, Table<MovieRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MovieRecord> getPrimaryKey() {
        return Keys.MOVIE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MovieRecord>> getKeys() {
        return Arrays.<UniqueKey<MovieRecord>>asList(Keys.MOVIE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Movie as(String alias) {
        return new Movie(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Movie rename(String name) {
        return new Movie(name, null);
    }
}
