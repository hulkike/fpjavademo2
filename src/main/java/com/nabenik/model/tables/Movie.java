/*
 * This file is generated by jOOQ.
*/
package com.nabenik.model.tables;


import com.nabenik.model.Keys;
import com.nabenik.model.Public;
import com.nabenik.model.tables.records.MovieRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Movie extends TableImpl<MovieRecord> {

    private static final long serialVersionUID = 1383688475;

    /**
     * The reference instance of <code>public.movie</code>
     */
    public static final Movie MOVIE = new Movie();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieRecord> getRecordType() {
        return MovieRecord.class;
    }

    /**
     * The column <code>public.movie.movie_id</code>.
     */
    public final TableField<MovieRecord, Long> MOVIE_ID = createField("movie_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.movie.director_name</code>.
     */
    public final TableField<MovieRecord, String> DIRECTOR_NAME = createField("director_name", org.jooq.impl.SQLDataType.VARCHAR.length(250).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.movie.duration</code>.
     */
    public final TableField<MovieRecord, Integer> DURATION = createField("duration", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.movie.gross</code>.
     */
    public final TableField<MovieRecord, Integer> GROSS = createField("gross", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.movie.genres</code>.
     */
    public final TableField<MovieRecord, String> GENRES = createField("genres", org.jooq.impl.SQLDataType.VARCHAR.length(250).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.movie.movie_title</code>.
     */
    public final TableField<MovieRecord, String> MOVIE_TITLE = createField("movie_title", org.jooq.impl.SQLDataType.VARCHAR.length(150).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.movie.plot_keywords</code>.
     */
    public final TableField<MovieRecord, String> PLOT_KEYWORDS = createField("plot_keywords", org.jooq.impl.SQLDataType.VARCHAR.length(250).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.movie.movie_imdb_link</code>.
     */
    public final TableField<MovieRecord, String> MOVIE_IMDB_LINK = createField("movie_imdb_link", org.jooq.impl.SQLDataType.VARCHAR.length(250).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.movie.country</code>.
     */
    public final TableField<MovieRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR.length(50).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.movie.content_rating</code>.
     */
    public final TableField<MovieRecord, String> CONTENT_RATING = createField("content_rating", org.jooq.impl.SQLDataType.VARCHAR.length(50).defaultValue(org.jooq.impl.DSL.field("''::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.movie.budget</code>.
     */
    public final TableField<MovieRecord, Long> BUDGET = createField("budget", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.movie.title_year</code>.
     */
    public final TableField<MovieRecord, Integer> TITLE_YEAR = createField("title_year", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1900", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.movie.imdb_score</code>.
     */
    public final TableField<MovieRecord, Double> IMDB_SCORE = createField("imdb_score", org.jooq.impl.SQLDataType.DOUBLE.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.movie.movie_facebook_likes</code>.
     */
    public final TableField<MovieRecord, Long> MOVIE_FACEBOOK_LIKES = createField("movie_facebook_likes", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.movie</code> table reference
     */
    public Movie() {
        this("movie", null);
    }

    /**
     * Create an aliased <code>public.movie</code> table reference
     */
    public Movie(String alias) {
        this(alias, MOVIE);
    }

    private Movie(String alias, Table<MovieRecord> aliased) {
        this(alias, aliased, null);
    }

    private Movie(String alias, Table<MovieRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MovieRecord> getPrimaryKey() {
        return Keys.MOVIE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MovieRecord>> getKeys() {
        return Arrays.<UniqueKey<MovieRecord>>asList(Keys.MOVIE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Movie as(String alias) {
        return new Movie(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Movie rename(String name) {
        return new Movie(name, null);
    }
}
